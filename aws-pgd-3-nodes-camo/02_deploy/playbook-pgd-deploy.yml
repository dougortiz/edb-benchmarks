---
- hosts: all
  name: EDB PGD CAMO deployment playbook
  connection: ssh
  become: true
  gather_facts: true
  any_errors_fatal: true
  max_fail_percentage: 0

  collections:
    - edb_devops.edb_postgres

  pre_tasks:
    - wait_for_connection:
      delay: 5
      timeout: 600

    - name: Initialize the user defined variables
      ansible.builtin.set_fact:
        pg_version: 15            # Change the version of Postgres you want to install
        pg_type: "EPAS"           # Change the pg_type to EPAS if EDB Advanced Server is needed
        repo_token: "XXXXXXXXX"   # EDB repo 2.0 token
        edb_enable_tde: false     # Enable TDE
        edb_key_unwrap_cmd: ""    # EDB Unwrap command to decrypt EDB master key. Use can use KMS command to get the real key
        edb_key_wrap_cmd: ""      # EDB Key wrap command to encrypt EDB master key. User can also use KMS commands to get the key
        edb_master_key: ""        # EDB master key for TDE encryption
        edb_secure_master_key: "" # EDB key or passphrase to encrypt EDB master key
        install_pgd: false        # Install PGD flag for installing PGD
        pgd_version: 5            # Postgres Distributed version
        enable_pgdg_repo: true    # flag/variable for enabling PGD repo

        # Un-comment the desired commit scope to benchmark
        pgd_commit_scopes:
          # - cs_name: 'camo_scope_1'
          #   cs_type: 'CAMO' # either camo or group_commit
          #   parent_group: 'pgd_cluster' # this group is present in cluster
          #   cs_origin_node_group: 'pgd_two_nodes' # this group may or may not be present
          #   member_nodes: ['pgd1', 'pgd2']
          #   default_group_cs: true
          #   cs_rule: "ALL ( pgd_two_nodes ) ON visible CAMO DEGRADE ON (timeout=500s) TO ASYNC"
          - cs_name: 'groupcommit_scope_1'
            cs_type: 'GROUP_COMMIT'
            parent_group: 'pgd_cluster'
            cs_origin_node_group: 'pgd_remaining_nodes'
            member_nodes: ['pgd3']
            default_group_cs: true
            cs_rule: "ALL ( pgd_remaining_nodes ) GROUP COMMIT"

  roles:
    - role: setup_repo
    - role: install_dbserver
    - role: init_dbserver
    - role: manage_dbserver    
    - role: setup_pgd