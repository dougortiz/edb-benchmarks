---
- hosts: all
  name: Execute pgd_bench - benchmark
  gather_facts: false
  become: true

  collections:
    - edb_devops.edb_postgres

  tasks:
    - name: Load servers.yml
      ansible.builtin.include_vars:
        file: "{{ terraform_project_path }}/servers.yml"
        name: infra

    - name: Assign value to pg_node
      set_fact:
        pg_node: "{{ node.key }}"
      loop: "{{ infra.servers.machines | dict2items }}"
      loop_control:
        loop_var: node
      when: node.key == 'pgd1'

    # - name: Drop 'pgbench_accounts' table
    #   community.postgresql.postgresql_query:
    #     autocommit: true
    #     query: "DROP TABLE IF EXISTS pgbench_accounts"
    #     db: "{{ pg_database }}"
    #     login_user: "{{ pg_owner }}"
    #     port: "{{ pg_port }}"
    #     login_unix_socket: "{{ pg_unix_socket_directories[0] }}"
    #   become_user: "{{ pg_owner }}"
    #   loop: "{{ infra.servers.machines | dict2items }}"
    #   loop_control:
    #     loop_var: node
    #   when: node.key == 'pgd1'

    # - name: Drop 'pgbench_branches' tables
    #   community.postgresql.postgresql_query:
    #     autocommit: true
    #     query: "DROP TABLE IF EXISTS pgbench_branches"
    #     db: "{{ pg_database }}"
    #     login_user: "{{ pg_owner }}"
    #     port: "{{ pg_port }}"
    #     login_unix_socket: "{{ pg_unix_socket_directories[0] }}"
    #   become_user: "{{ pg_owner }}"
    #   loop: "{{ infra.servers.machines | dict2items }}"
    #   loop_control:
    #     loop_var: node
    #   when: node.key == 'pgd1'

    # - name: Drop 'pgbench_tellers' table if exists
    #   community.postgresql.postgresql_query:
    #     autocommit: true
    #     query: "DROP TABLE IF EXISTS pgbench_tellers"
    #     db: "{{ pg_database }}"
    #     login_user: "{{ pg_owner }}"
    #     port: "{{ pg_port }}"
    #     login_unix_socket: "{{ pg_unix_socket_directories[0] }}"
    #   become_user: "{{ pg_owner }}"
    #   loop: "{{ infra.servers.machines | dict2items }}"
    #   loop_control:
    #     loop_var: node
    #   when: node.key == 'pgd1'

    - name: Copy the exec-pgdbench.sh file
      ansible.builtin.copy:
        src: files/exec-pgdbench.sh
        dest: "{{ pgd_bench_home }}/exec-pgdbench.sh"
        mode: "0755"

    - name: Execute the pgd_bench script
      ansible.builtin.shell: >
        {{ pgd_bench_home }}exec-pgdbench.sh
      args:
        executable: /bin/bash
      environment:
        PGD_TYPE: "{{ pgd_bench_type }}"
        PGD_HOME: "{{ pgd_bench_home }}"
        PG_NODE: "{{ pg_node }}"
        PG_DATABASE: "{{ pg_database }}"
        PG_PORT: "{{ pg_port }}"
        PGD_DURATION: "{{ pgd_duration }}"
        PGD_SCALE: "{{ pgd_scale }}"
        PGD_CLIENTS: "{{ pgd_clients }}"
      become_user: "{{ pg_owner }}"
      loop: "{{ infra.servers.machines | dict2items }}"
      loop_control:
        loop_var: node
      when: node.key == 'pgd1'
      run_once: true

    # - name: Save system details
    #   ansible.builtin.include_role:
    #     name: get-system-details

    # - name: Assign value to pg_node
    #   set_fact:
    #     pg_node: "{{ node.key }}"
    #   loop: "{{ infra.servers.machines | dict2items }}"
    #   loop_control:
    #     loop_var: node
    #   when: node.key == 'pgd1'

    # - name: Copy the exec-pgdbench-get-tps.sh file
    #   ansible.builtin.copy:
    #     src: files/exec-pgdbench-get-tps.sh
    #     dest: "{{ pgd_bench_home }}/exec-pgdbench-get-tps.sh"
    #     mode: "0755"

    # - name: Execute the pgd_bench_get_tps script
    #   ansible.builtin.shell: >
    #     {{ pgd_bench_home }}exec-pgdbench-get-tps.sh
    #   args:
    #     executable: /bin/bash
    #   environment:
    #     PGD_HOME: "{{ pgd_user_home }}"
    #   become_user: "{{ pg_owner }}"
    #   loop: "{{ infra.servers.machines | dict2items }}"
    #   loop_control:
    #     loop_var: node
    #   when: node.key == 'pgd1'
    #   run_once: true

    # - name: Fetch data files
    #   ansible.builtin.fetch:
    #     src: "/var/lib/edb/pgd_bench_tps_results.csv"
    #     dest: "{{ results_directory }}/pgd_bench_tps_results.csv"
    #     flat: true
    #   loop: "{{ infra.servers.machines | dict2items }}"
    #   loop_control:
    #     loop_var: node
    #   when: node.key == 'pgd1'
    #   run_once: true
    #   become: true
    #   become_user: "{{ pg_owner }}"